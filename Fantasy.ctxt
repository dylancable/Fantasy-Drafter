#BlueJ class context
comment0.params=
comment0.target=void\ loadAvailablePlayers()
comment1.params=
comment1.target=void\ loadCumulative()
comment10.params=numPositions\ round\ pick
comment10.target=double\ calcBest(int[],\ int,\ int)
comment11.params=round\ pick
comment11.target=int\ getPick(int,\ int)
comment12.params=orig
comment12.target=java.lang.String\ convertToName(java.lang.String)
comment13.params=
comment13.target=void\ analyzeMocks()
comment14.params=filename
comment14.target=java.util.ArrayList\ readFile(java.lang.String)
comment15.params=orig
comment15.target=java.lang.String\ transformName(java.lang.String)
comment16.params=orig
comment16.target=java.lang.String\ transformTeam(java.lang.String)
comment17.params=positionPicks\ startingRound\ pick
comment17.target=double\ evalPickOrder(int[],\ int,\ int)
comment18.params=
comment18.target=void\ loadMainInfo()
comment19.params=
comment19.target=void\ bestValue()
comment19.text=\n\ \ \ \ private\ static\ void\ loadMainInfo()\ throws\ Exception\ {\n\ \ \ \ \ \ \ \ for(int\ pos\ \=\ 0;\ pos\ <\ positions.length;\ pos++)\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ String\ positionName\ \=\ positions[pos];\n\ \ \ \ \ \ \ \ \ \ \ \ BufferedReader\ f\ \=\ new\ BufferedReader(new\ FileReader(positionName+"-ADP.txt"));\n\ \ \ \ \ \ \ \ \ \ \ \ while(f.ready())\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String\ s\ \=\ f.readLine();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String[]\ tokens\ \=\ s.split(",");\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Player\ p\ \=\ new\ Player();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.name\ \=\ tokens[1].substring(1);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ illegalChars.length;\ i++)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.name\ \=\ p.name.replace(illegalChars[i],"");\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.name\ \=\ convertToName(p.name);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.team\ \=\ tokens[2].substring(1,tokens[2].indexOf('"')).toUpperCase();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.ADP\ \=\ Double.parseDouble(tokens[3]);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.position\ \=\ pos;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ ID\ \=\ players.size();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.ID\ \=\ ID;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ players.add(p);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PlayerIdent\ ident\ \=\ p.getPID();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(PlayerIDs.containsKey(ident))\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ outDoublePlayers.println(p.name\ +\ "\ "\ +\ p.team);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PlayerIDs.put(ident,ID);\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ f\ \=\ new\ BufferedReader(new\ FileReader(positionName+"-Points.txt"));\n\ \ \ \ \ \ \ \ \ \ \ \ while(f.ready())\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String\ s\ \=\ f.readLine();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String[]\ tokens\ \=\ s.split(",");\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ splitLoc\ \=\ tokens[1].indexOf('(');\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String\ name\ \=\ tokens[1].substring(0,splitLoc-1);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ name\ \=\ convertToName(name);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String\ team\ \=\ tokens[1].substring(splitLoc+1,tokens[1].indexOf(')')).toUpperCase();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ double\ points\ \=\ Double.parseDouble(tokens[2]);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ position\ \=\ pos;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PlayerIdent\ ident\ \=\ new\ PlayerIdent(name,team);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(PlayerIDs.containsKey(ident))\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ ID\ \=\ PlayerIDs.get(ident);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Player\ p\ \=\ players.get(ID);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(p.points\ >\ EPSILON)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ outDoublePlayers.println(p.name\ +\ "\ "\ +\ p.team);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.points\ \=\ points;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ else\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Player\ p\ \=\ new\ Player();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.name\ \=\ name;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.team\ \=\ team;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.ADP\ \=\ 0;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.position\ \=\ position;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.points\ \=\ points;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ ID\ \=\ players.size();\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ p.ID\ \=\ ID;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ players.add(p);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PlayerIDs.put(p.getPID(),ID);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ players.size();\ i++)\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ Player\ p\ \=\ players.get(i);\n\ \ \ \ \ \ \ \ \ \ \ \ if(p.points\ <\ EPSILON\ ||\ p.ADP\ <\ EPSILON)\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //players.remove(i);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ outRemPlayers.println(p.name\ +\ "\ "\ +\ p.team);\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //i--;\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ players.size();\ i++)\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ out.println(players.get(i).toString());\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ outDoublePlayers.close();\n\ \ \ \ \ \ \ \ outRemPlayers.close();\n\ \ \ \ }\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment20.params=vals
comment20.target=double\ getMean(int[])
comment21.params=vals
comment21.target=double\ getStdev(int[])
comment22.params=vals
comment22.target=double[]\ getNormalCurve(int[])
comment23.params=mean\ stdev
comment23.target=double[]\ getNormalCurve(double,\ double)
comment24.params=str
comment24.target=boolean\ isDouble(java.lang.String)
comment3.params=
comment3.target=void\ runDraft()
comment4.params=val
comment4.target=double\ roundOff(double)
comment5.params=numPositions\ pick
comment5.target=void\ showCurrentState(int[],\ int)
comment6.params=myPick
comment6.target=void\ calculateValues(int)
comment7.params=currentPick\ myPick\ amount\ position
comment7.target=Fantasy.Player[]\ getMostLikely(int,\ int,\ int,\ int)
comment8.params=
comment8.target=void\ clearValues()
comment9.params=myNumPositions\ myRound
comment9.target=void\ calcBestDraft(int[],\ int)
numComments=25
